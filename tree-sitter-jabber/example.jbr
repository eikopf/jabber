#! a shebang line

//! A module comment

// a regular comment

use std.list
use std.list.List

const BLAH: _ = Some(Foo(f()))

use std.foo.bar.baz.SomeType

pub const PI: float = 3.14159263

/// A dynamically-sized buffer of bytes.
extern type ByteBuffer

type alias Unit   = ()
type alias Never  = !
type alias Bool   = bool
type alias Char   = char
type alias String = string

type alias Absurd = ! -> A

@name.scheme("bytevector->list")
extern fn byte_buffer_to_list(buf: ByteBuffer) -> List[int]

@some.attribute(true, '\x00', "hello, world!")
mod foo
@unscoped_attr
mod bar
mod baz
mod qux

fn id(x) = x

pub fn callcall(f: A -> B -> C) = f(0, 1, 2)
fn constant(x: A) -> B -> A = (_: B) -> x

pub type Ref[T] = Ref { mutable contents : T }

pub fn head((x :: _): List[T]) -> T = x

pub fn ref(contents: T) -> Ref[T] = Ref { contents }
pub fn deref(ref: Ref[T]) -> T = ref.contents
pub fn update(ref: Ref[T], new: T) {
  ref <- new;
}

pub fn foo() -> () {
  a();
  b();
  let __true  = !!true;
  let __false = !!false;
  let _: bool = c();
  let (x, y, z, w): (int, int, int, int) = (0xFF, 0x00, 0xAA, 0x33);
  let first = ((), 'a', 13.023, true, "world").1;
  let a: foo.bar.Ty[int] = b.c.d();
  let t = ((!!!false));
  let _ = 1.0 + 2 * 3;
  let _ = x
          |> f
          |> g;

  let foo = 1 :: 2 :: 3 :: [];
  let pi:  float =     3.14159265;
  let tau: float = 2 * 3.14159265;
}

/// A value which may be `Ok(T)` or `Err(E)`.
@core.lang_item
pub type Result[T, E] =
    | @core.lang_item Ok(T)
    | @core.lang_item Err(E)

pub type alias Always[T]    = Result[T, !]
pub type alias AlwaysErr[E] = Result[!, E]

fn nybl(value: int) -> std.option.Option[Nibble] {
    if value <= 0xFF {
        Some(Nibble(value))
    } else {
        None
    }
}

fn pats(list: List[T]) = match list {
  List.Nil => (),
  [] => panic(),
  [a, b, c] => todo(),
  a :: b :: c :: [] => todo(),
}

type alias Never     = !
type alias Absurd[T] = ! -> T

pub type Option[T] = Some(T) | None

pub fn unwrap(opt: Option[T]) -> T = match opt {
  Option.None => panic("Tried to unwrap an Option.None"),
  Option.Some(x) => x,
}

pub fn map(opt: Option[T], f: T -> U) -> Option[U] = match opt {
  Option.None => Option.None,
  Option.Some(x) => Option.Some(f(x))
}

