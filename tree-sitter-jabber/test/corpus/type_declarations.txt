==========================
nullary type declarations
==========================

type Unit       = ()
type Bool       = bool
type AlwaysNone = Option[!]

---------------------------------------

(source_file
  (type_decl
    alias: (ident)
    type: (unit_type))
  (type_decl
    alias: (ident)
    type: (primitive_type))
  (type_decl
    alias: (ident)
    type: (generic_type
      name: (ident)
      arguments: (generic_type_args
        (primitive_type)))))

==========================
generic type declarations
==========================

type Always[T] = Result[T, !]
type  Maybe[T] = Option[T]

------------------------------------

(source_file
  (type_decl
    alias: (generic_type
      name: (ident)
      arguments: (generic_type_args
        (ident)))
    type: (generic_type
      name: (ident)
      arguments: (generic_type_args
        (ident)
        (primitive_type))))
  (type_decl
    alias: (generic_type
      name: (ident)
      arguments: (generic_type_args
        (ident)))
    type: (generic_type
      name: (ident)
      arguments: (generic_type_args
        (ident)))))

=========================
extern type declarations
=========================

pub extern type Buffer
    extern type Ref[T]

-----------------------------

(source_file
  (extern_type_decl
    visibility: (access_spec)
    type: (ident))
  (extern_type_decl
    type: (generic_type
      name: (ident)
      arguments: (generic_type_args
        (ident)))))
