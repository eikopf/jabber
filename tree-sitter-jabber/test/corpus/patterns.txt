====================
identifier patterns
====================

fn main() {
  let name = ();
  let Option.None = None;
}

--------------------------

(source_file
  (fn_decl
    name: (ident)
    parameters: (parameters)
    body: (block
      (let_stmt
        pattern: (ident)
        value: (unit_literal))
      (let_stmt
        pattern: (path
          root: (ident)
          name: (ident))
        value: (ident)))))

=================
literal patterns
=================

fn main() {
  let () = ();
  let  0 =  0;
}

------------------

(source_file
  (fn_decl
    name: (ident)
    parameters: (parameters)
    body: (block
      (let_stmt
        pattern: (unit_literal)
        value: (unit_literal))
      (let_stmt
        pattern: (dec_literal)
        value: (dec_literal)))))

==================
wildcard patterns
==================

fn main() {
  let _ = ();
}

-------------

(source_file
  (fn_decl
    name: (ident)
    parameters: (parameters)
    body: (block
      (let_stmt
        pattern: (wildcard_pattern)
        value: (unit_literal)))))

===============
tuple patterns
===============

fn foo() = match tup {
  (x) => "parenthesized ident",
  (x,) => "singleton tuple",
  (x, y) => "pair",
  (x, y, z,) => "triple with a trailing comma",
}

-------------------------------------------------

(source_file
  (fn_decl
    name: (ident)
    parameters: (parameters)
    body: (match_expr
      scrutinee: (ident)
      arms: (match_arms
        (match_arm
          pattern: (parenthesized_pattern
            inner: (ident))
          body: (string_literal))
        (match_arm
          pattern: (tuple_pattern (ident))
          body: (string_literal))
        (match_arm
          pattern: (tuple_pattern
            (ident)
            (ident))
          body: (string_literal))
        (match_arm
          pattern: (tuple_pattern
            (ident)
            (ident)
            (ident))
          body: (string_literal))))))

==============
list patterns
==============

fn bar() = match list {
  []        => "empty list",
  [x]       => "singleton",
  [x,]      => "singleton with a trailing comma",
  [x, y,]   => "pair with a trailing comma",
  [x, y, z] => "triple",
}

---------------------------------------------------

(source_file
  (fn_decl
    name: (ident)
    parameters: (parameters)
    body: (match_expr
      scrutinee: (ident)
      arms: (match_arms
        (match_arm
          pattern: (list_pattern)
          body: (string_literal))
        (match_arm
          pattern: (list_pattern (ident))
          body: (string_literal))
        (match_arm
          pattern: (list_pattern (ident))
          body: (string_literal))
        (match_arm
          pattern: (list_pattern
            (ident)
            (ident))
          body: (string_literal))
        (match_arm
          pattern: (list_pattern
            (ident)
            (ident)
            (ident))
          body: (string_literal))))))

==============
cons patterns
==============

fn cons() = match list {
   x :: xs        => "head & tail",
   x :: []        => "singleton",
   x :: y   :: zs => "head & head & tail",
  (x :: ys) :: zs => "head & tail & tail",
}

-----------------------------------------

(source_file
  (fn_decl
    name: (ident)
    parameters: (parameters)
    body: (match_expr
      scrutinee: (ident)
      arms: (match_arms
        (match_arm
          pattern: (cons_pattern
            head: (ident)
            tail: (ident))
          body: (string_literal))
        (match_arm
          pattern: (cons_pattern
            head: (ident)
            tail: (list_pattern))
          body: (string_literal))
        (match_arm
          pattern: (cons_pattern
            head: (ident)
            tail: (cons_pattern
              head: (ident)
              tail: (ident)))
          body: (string_literal))
        (match_arm
          pattern: (cons_pattern
            head: (parenthesized_pattern
              inner: (cons_pattern
                head: (ident)
                tail: (ident)))
            tail: (ident))
          body: (string_literal))))))

==============
enum patterns
==============

fn baz() = match something {
  Ident         => "in-scope unit variant",
  Some.Path     => "qualified unit variant",
  Foo(x, y)     => "in-scope variant with payload",
  Bar.Baz(z, _) => "qualified variant with payload",
}

------------------------------------------------------

(source_file
  (fn_decl
    name: (ident)
    parameters: (parameters)
    body: (match_expr
      scrutinee: (ident)
      arms: (match_arms
        (match_arm
          pattern: (ident)
          body: (string_literal))
        (match_arm
          pattern: (path
            root: (ident)
            name: (ident))
          body: (string_literal))
        (match_arm
          pattern: (enum_pattern
            name: (ident)
            payload: (enum_pattern_payload
              (ident)
              (ident)))
          body: (string_literal))
        (match_arm
          pattern: (enum_pattern
            name: (path
              root: (ident)
              name: (ident))
            payload: (enum_pattern_payload
              (ident)
              (wildcard_pattern)))
          body: (string_literal))))))
