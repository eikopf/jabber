===================================
bang (prefix NOT)
===================================

const    not: _ = !x
const notnot: _ = !!x

----------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (prefix_expr
      operator: (prefix_operator)
      operand: (ident)))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (prefix_expr
      operator: (prefix_operator)
      operand: (prefix_expr
        operator: (prefix_operator)
        operand: (ident)))))

==============================
plus (infix add)
==============================

const   ints: _ = 7   +  8
const floats: _ = 7.0 +. 8.0

--------------------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (dec_literal)
      operator: (binary_operator)
      rhs: (dec_literal)))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (float_literal)
      operator: (binary_operator)
      rhs: (float_literal))))

===============================
minus (prefix neg / infix sub)
===============================

const  zero: _ = -0.0
const three: _ = 5 - 2
const eight: _ = 6 - -2

--------------------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (prefix_expr
      operator: (prefix_operator)
      operand: (float_literal)))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (dec_literal)
      operator: (binary_operator)
      rhs: (dec_literal)))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (dec_literal)
      operator: (binary_operator)
      rhs: (prefix_expr
        operator: (prefix_operator)
        operand: (dec_literal)))))

================================
arithmetic operator precedences
================================

const  left: _ = x * y + z
const right: _ = x * y ^ z

-------------------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (ident))
      operator: (binary_operator)
      rhs: (ident)))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (ident)
      operator: (binary_operator)
      rhs: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (ident)))))

==================
carat (infix pow)
==================

const   one: _ = 2 ^ 0
const undef: _ = 0 ^ 0 ^ 0

----------------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (dec_literal)
      operator: (binary_operator)
      rhs: (dec_literal)))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (dec_literal)
      operator: (binary_operator)
      rhs: (binary_expr
        lhs: (dec_literal)
        operator: (binary_operator)
        rhs: (dec_literal)))))

=====================
pipes (right & left)
=====================

const right: _ = x |> f |> g
const  left: _ = g <| f <| x
const  both: _ = f <| x |> g

------------------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (ident))
      operator: (binary_operator)
      rhs: (ident)))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (ident)
      operator: (binary_operator)
      rhs: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (ident))))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (ident))
      operator: (binary_operator)
      rhs: (ident))))

=====================
comparison operators
=====================

const cmp: _ = x >= y

-----------------------
(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (ident)
      operator: (binary_operator)
      rhs: (ident))))

=====
cons
=====

const zeros: _ = 0 :: 0 :: 0 :: []

------------------------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (dec_literal)
      operator: (binary_operator)
      rhs: (binary_expr
        lhs: (dec_literal)
        operator: (binary_operator)
        rhs: (binary_expr
          lhs: (dec_literal)
          operator: (binary_operator)
          rhs: (list_expr))))))

=======
concat
=======

const _123: _ = [1] ++ [2] ++ [3]

----------------------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (list_expr (dec_literal))
      operator: (binary_operator)
      rhs: (binary_expr
        lhs: (list_expr (dec_literal))
        operator: (binary_operator)
        rhs: (list_expr (dec_literal))))))

=======================
lazy boolean operators
=======================

const _and: _ = x && y && z
const  _or: _ = x || y || z
const both: _ = x && y || z

----------------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (ident)
      operator: (binary_operator)
      rhs: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (ident))))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (ident)
      operator: (binary_operator)
      rhs: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (ident))))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (ident))
      operator: (binary_operator)
      rhs: (ident))))

=================
update operators
=================

const ref: _ = some_ref := 3
const rec: _ = rec.mut_field <- 3

-----------------------------------

(source_file
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (ident)
      operator: (binary_operator)
      rhs: (dec_literal)))
  decl: (const_decl
    name: (ident)
    type: (inferred_type)
    value: (binary_expr
      lhs: (path
        root: (ident)
        name: (ident))
      operator: (binary_operator)
      rhs: (dec_literal))))
