==================
bang (prefix NOT)
==================

const    not = !x
const notnot = !!x

----------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (prefix_expr
        operator: (prefix_operator)
        operand: (ident))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (prefix_expr
        operator: (prefix_operator)
        operand: (prefix_expr
          operator: (prefix_operator)
          operand: (ident))))))

=================
plus (infix add)
=================

const   ints = 7   +  8
const floats = 7.0 +. 8.0

--------------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (dec_literal)
        operator: (binary_operator)
        rhs: (dec_literal))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (float_literal)
        operator: (binary_operator)
        rhs: (float_literal)))))

===============================
minus (prefix neg / infix sub)
===============================

const  zero = -0.0
const three = 5 - 2
const eight = 6 - -2

--------------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (prefix_expr
        operator: (prefix_operator)
        operand: (float_literal))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (dec_literal)
        operator: (binary_operator)
        rhs: (dec_literal))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (dec_literal)
        operator: (binary_operator)
        rhs: (prefix_expr
          operator: (prefix_operator)
          operand: (dec_literal))))))

================================
arithmetic operator precedences
================================

const  left = x * y + z
const right = x * y ^ z

-------------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (binary_expr
          lhs: (ident)
          operator: (binary_operator)
          rhs: (ident))
        operator: (binary_operator)
        rhs: (ident))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (binary_expr
          lhs: (ident)
          operator: (binary_operator)
          rhs: (ident))))))

==================
carat (infix pow)
==================

const  one = 2 ^ 0
const zero = 0 ^ 0 ^ 0

----------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (dec_literal)
        operator: (binary_operator)
        rhs: (dec_literal))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (dec_literal)
        operator: (binary_operator)
        rhs: (binary_expr
          lhs: (dec_literal)
          operator: (binary_operator)
          rhs: (dec_literal))))))

=====================
pipes (right & left)
=====================

const right = x |> f |> g
const  left = g <| f <| x
const  both = f <| x |> g

------------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (binary_expr
          lhs: (ident)
          operator: (binary_operator)
          rhs: (ident))
        operator: (binary_operator)
        rhs: (ident))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (binary_expr
          lhs: (ident)
          operator: (binary_operator)
          rhs: (ident)))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (binary_expr
          lhs: (ident)
          operator: (binary_operator)
          rhs: (ident))
        operator: (binary_operator)
        rhs: (ident)))))

=====================
comparison operators
=====================

const cmp: bool = x >= y

-----------------------
(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      type: (primitive_type)
      value: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (ident)))))

==============
cons operator
==============

const zeros = 0 :: 0 :: 0 :: []

------------------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (dec_literal)
        operator: (binary_operator)
        rhs: (binary_expr
          lhs: (dec_literal)
          operator: (binary_operator)
          rhs: (binary_expr
            lhs: (dec_literal)
            operator: (binary_operator)
            rhs: (list_expr)))))))

=====================
list concat operator
=====================

const _123 = [1] ++ [2] ++ [3]

----------------------------------
(source_file declaration: (declaration body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (list_expr (dec_literal))
        operator: (binary_operator)
        rhs: (binary_expr
          lhs: (list_expr (dec_literal))
          operator: (binary_operator)
          rhs: (list_expr (dec_literal)))))))

=======================
lazy boolean operators
=======================

const  and = x && y && z
const   or = x || y || z
const both = x && y || z

----------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (binary_expr
          lhs: (ident)
          operator: (binary_operator)
          rhs: (ident)))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (binary_expr
          lhs: (ident)
          operator: (binary_operator)
          rhs: (ident)))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (binary_expr
          lhs: (ident)
          operator: (binary_operator)
          rhs: (ident))
        operator: (binary_operator)
        rhs: (ident)))))

===================================
primitive and ref update operators
===================================

const ref = some_ref := 3
const rec = rec.mut_field <- 3

-----------------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (ident)
        operator: (binary_operator)
        rhs: (dec_literal))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (binary_expr
        lhs: (path
          root: (ident)
          name: (ident))
        operator: (binary_operator)
        rhs: (dec_literal)))))
