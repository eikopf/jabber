===============
nested lambdas
===============

const   once = () -> 0
const  twice = () -> () -> 0
const thrice = () -> () -> () -> 0

---------------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (lambda_expr
        parameters: (parameters)
        body: (dec_literal))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (lambda_expr
        parameters: (parameters)
        body: (lambda_expr
          parameters: (parameters)
          body: (dec_literal)))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (lambda_expr
        parameters: (parameters)
        body: (lambda_expr
          parameters: (parameters)
          body: (lambda_expr
            parameters: (parameters)
            body: (dec_literal)))))))

====================
lambda applications
====================

const unary   = (__x -> 0xFF)(16)
const nullary = (() -> ())()

-----------------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (call_expr
        callee: (parenthesized_expr
          inner: (lambda_expr
            parameters: (ident)
            body: (hex_literal)))
        arguments: (arguments (dec_literal)))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (call_expr
        callee: (parenthesized_expr
          inner: (lambda_expr
            parameters: (parameters)
            body: (unit_literal)))
        arguments: (arguments)))))

==========================
pathological lambda cases
==========================

const unit_pat   = ((),) -> ()
const struct_pat = (Foo {a, b}) -> a * b

---------------------------------------------

(source_file
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (lambda_expr
        parameters: (parameters
          (parameter
            pattern: (unit_literal)))
        body: (unit_literal))))
  declaration: (declaration
    body: (const_decl
      name: (ident)
      value: (lambda_expr
        parameters: (parameters
          (parameter
            pattern: (record_pattern
              name: (ident)
              fields: (record_pattern_fields
                (record_pattern_field
                  field: (ident))
                (record_pattern_field
                  field: (ident))))))
        body: (binary_expr
          lhs: (ident)
          operator: (binary_operator)
          rhs: (ident))))))
