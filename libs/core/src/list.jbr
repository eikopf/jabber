//! Lists as an inductive datatype.

pub type List[T] = Nil | Cons(T, List[T]) 

// UTILITY FUNCTIONS

@total
pub fn length(xs: List[T]) -> int = __prim_length(xs)
pub fn map(f: A -> B, xs: List[A]) -> List[B] = __prim_map(f, xs)

@total
pub fn head(x :: xs: List[T]) -> T = x
@total
pub fn tail(x :: xs: List[T]) -> List[T] = xs

// OPERATORS

@total
@operator.cons
pub fn cons(head: T, tail: List[T]) -> List[T] = List.Cons(head, tail)
@total
@operator.append
pub fn append(lhs: List[T], rhs: List[T]) -> List[T] = __prim_append(lhs, rhs)


// EXTERNALS

@external.scheme("append")
extern fn __prim_append(lhs: List[T], rhs: List[T]) -> List[T]
@external.scheme("length")
extern fn __prim_length(xs: List[T]) -> int
@external.scheme("map")
extern fn __prim_map(f: A -> B, xs: List[A]) -> List[B]
