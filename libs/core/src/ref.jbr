//! Mutable reference cells.

pub type Ref[T] = Ref { mutable contents: T }

@total
pub fn ref(contents: T) -> Ref[T] = Ref { contents }

@total
@operator.deref
pub fn deref(Ref { contents }: Ref[T]) -> T = contents

@operator.update
pub fn update(ref: Ref[T], value: T) -> () = ref.contents <- value

pub fn increment(ref: Ref[int]) -> () = ref := *ref + 1
pub fn decrement(ref: Ref[int]) -> () = ref := *ref - 1

pub fn swap(a: Ref[T], b: Ref[T]) -> () = {
  let tmp = *a;
  a := *b;
  b := tmp;
}
