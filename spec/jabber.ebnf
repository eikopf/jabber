(* 
  this file defines Jabber's formal context-free grammar using
  Extended Backus-Naur Form, though it does not explicitly define
  rules related to whitespace and comments; such "extra" rules can
  appear between all other rules, and their structure is defined in
  the ./extras.ebnf file.
*)

START = {declaration} ;

(* DECLARATIONS *)

declaration = {attributes}, [visibility], decl_body ;
visibility = "pub" ;

decl_body = mod decl              (* modules *)
          | use decl              (* imports *)
          | type alias decl       (* type aliases *)
          | type decl             (* custom types *)
          | extern type decl      (* foreign types *)
          | fn decl               (* functions *)
          | extern fn decl        (* foreign functions *)
          | const decl            (* constants *)
          ;

mod decl = "mod", identifier ;

use decl = "use", use item ;

use item = name 
         | glob item 
         | alias item 
         | tree item 
         ;

glob item  = [name, "."], "*" ;
alias item = name, "as", ident ;
tree item  = [name, "."], "{", [use item, {",", use item}, [","]], "}" ;

type decl        = ["opaque"], "type", type name, "=", type constructors ;
extern type decl = "extern",   "type", type name ;
type alias decl  = "type",    "alias", type name, "=", type ;

type name = ident, [generic parameters] ;
generic parameters = "[", ident, {",", ident}, [","], "]" ;

type constructors = {type constructor} ;
type constructor  = ident, [record payload | tuple payload] ;

record payload = "{" record field, {",", record field}, [","], "}" ;
tuple payload  = "("         type, {",",         type}, [","], ")" ;

record field = ["mutable"], ident, ":", type ;

fn decl        =           "fn", ident, parameters, ["->", type], fn body;
extern fn decl = "extern", "fn", ident, parameters, ["->", type];

parameters = "(", [parameter, {"," parameter}, [","]], ")" ;
parameter  = pattern, [":", type] ;

fn body = ("=", expr) | block ;

const decl  = "const", ident, ":", type, "=", expr ;

(* ATTRIBUTES *)

attributes = { attribute } ;
attribute = "@", name, ["(", {attribute argument}, ")"] ;
attribute argument = name | literal expr ;

(* EXPRESSIONS *)

expr = name                     (* items *)
     | literal expr             (* literals *)
     | list expr                (* lists *)
     | tuple expr               (* tuples *)
     | record expr              (* record literals *)
     | field expr               (* projections *)
     | lambda expr              (* function literals *)
     | call expr                (* function calls *)
     | prefix expr              (* prefix operators *)
     | binary expr              (* infix operators *)
     | match expr               (* pattern matches *)
     | if expr                  (* boolean conditionals *)
     | parenthesized expr       (* parentheses *)
     | block                    (* block-scoped expressions *)
     ;

literal expr = unit literal
             | true literal
             | false literal
             | character literal
             | string literal
             | integer literal
             | float literal
             ;

unit literal = "(", ")" ;
true literal = "true" ;
false literal = "false" ;
char literal = ? regex: "'(\\'|.|\\u\{[0-9a-fA-F]+\}|\\x\d+|\\.)'" ? ;
string literal = ? regex: '"(\\"|[^"\r])*"' ? ;

(* 
  NOTE: the integer literal and float literal rules are
  defined in ./numbers.ebnf
*)

list expr  = "[", [expr, {",", expr}, [","]], "]" ;
tuple expr = "(",  expr, {",", expr}, [","],  ")" ;

record expr = name, 
              "{", record expr field, {",", record expr field},
             [",", record expr base],
             [","], "}" ;

record expr field = ident, [":", expr] ;
record expr base = "..", expr ;

field expr = expr, ".", ident ;

lambda expr = (ident | parameters), "->", expr ;

call expr = expr, "(", [expr, {",", expr}, [","]], ")" ;

prefix expr  = prefix operator, expr ;
binary expr  = expr, binary operator, expr ;

prefix operator  = "!" | "*" | "-" | "-." ;
binary operator  = "^"  | "^."
                 | "<|" | "|>"
                 | "==" | "!=" 
                 | ">"  | "<"  | ">="  | "<="
                 | ">." | "<." | ">=." | "<=."
                 | "+"  | "-"
                 | "+." | "-."
                 | "*"  | "/" 
                 | "*." | "/." 
                 | "%"
                 | "::" | "++"
                 | "&&" | "||"
                 | ":=" | "<-"
                 ;

match expr = "match", expr, match arms ;
match arms = "{", [match arm, {",", match arm}, [","]], "}" ;
match arm = pattern, ["if", expr], "=>" expr ;

if expr = "if", expr, block, [else clause] ;
else clause = "else" (if expr | block) ;

block = "{", {stmt}, [expr], "}" ;
stmt = ";" | expr stmt | let stmt ;
expr stmt = expr, ";" ;
let stmt = "let", pattern, [":", type], "=", expr, ";" ;

parenthesized expr = "(", expr, ")" ;

(* PATTERNS *)

pattern = "_"
        | name
        | literal expr
        | tuple pattern
        | list pattern
        | cons pattern
        | enum pattern
        | record pattern
        | parenthesized pattern
        ;

tuple pattern = "(",  pattern, {",", pattern}, [","],  ")" ;
list pattern  = "[", [pattern, {",", pattern}, [","]], "]" ;

cons pattern = pattern, "::", pattern ;

enum pattern = name, "(", pattern, {",", pattern}, [","], ")" ;

record pattern = name, 
                "{", record pattern field, {",", record pattern field},
               [",", rest pattern],
               [","], "}" ;

record pattern field = ident, [":", type] ;
rest pattern = ".." ;

parenthesized pattern = "(", pattern, ")" ;

(* TYPES *)

type = "_"   (* inference placeholder *)
     | name
     | primitive type
     | unit type
     | tuple type
     | generic type
     | function type
     | parenthesized type
     ;

primitive type = "!"
               | "bool"
               | "char"
               | "string"
               | "int"
               | "float"
               ;

unit type = "(", ")" ;

tuple type = "(", type, {",", type}, [","], ")" ;

generic type = name, "[", type, {",", type}, [","], "]" ;

function type = type, "->", type ;

parenthesized type = "(", type, ")" ;

(* IDENTIFIERS *)

name = path | identifier ;

path = name, ".", identifier ;

identifier = ? regex: "(_+[a-zA-Z0-9]|[a-zA-Z])[_a-zA-Z0-9]*" ? ;
